Base to start from setup
    pip install Django==4.0.2
    django-admin startproject project .
    python manage.py startapp store
    python manage.py migrate


1-BaseCode
    clone the code from the branch
    makemigrations 
    migrate
    python manage.py createsuperuser 
    python manage.py runserver
    install SQLITE EXPLORER
    use the tool to run the query 1000product.sql

2-BasicREST
    2.1 install REST Framework
        pip install djangorestframework==3.12.4
        add it to the applications > settings 
        add url 
    
    2.2 Response by default Django HttpResponse
        store > views 
        store & project  > url
        http://127.0.0.1:8000/store/products/

    2.3 Response by Rest framework @api_view decorator 
        store > views 
    
    2.4 Product details by @api_view
        views and URLs
    
    2.5 Basic serializer
        create serializers.py
        serializers > create serializer for the product model 
        views > to connect between product model and product serializer
        http://127.0.0.1:8000/store/products/999/
        settings > REST_FRAMEWORK to return the numbers intigers not string 
    
    2.6 if the product not exist it should response 4.4
        views > product_detail class > get_object_404 
        views > product_list class 
            http://127.0.0.1:8000/store/products/

    2.7 You can write business at the serializer NOT exist in the product model 
        serializers > 
            price_with_tax
    
    2.8 Rename the serializer field name different than the model 
        serializers > source= 'unit_price'

    2.9 Serializing Relationships 
        getting the related collections of product
        serializers > create CollectionSerializer + collection field point to the serializer

    2.10 Model serializer
        "It looks like we are repeating ourselves all fields here also exist there"
        serializer > use serializers.ModelSerializer instead of serializers.Serializer
        we can include the normal model fields and custom fields too
        serializer > same for the collection

    2.11 Deserializing Objects POST, PUT , DELETE
         receive date from the client , create product for example 
         so at the api_view post method first we need to deserialize the serializer then validate
         and at the end post the data to the model 
         1- POST
            views > 2.11 product_list POST method
            serialize > make sure to add the missing fields at ProductSerializer 
            To test the post 
            {
                "title": "a",
                "slug": "a_slug",
                "unit_price": 22,
                "collectoin": 7,
                "inventory": 10
            }
        2- PUT
            views > 2.11 product_detail PUT method
            To test put 
            {
                "title": "b",
                "slug": "b_slug",
                "unit_price": 22,
                "collection": 7,
                "inventory": 10
            }   
        3- DELETE
            views > 2.11 product_detail DELETE method
            to test browse to any product and click delete 
            http://127.0.0.1:8000/store/products/2/
    
    2.12 collections 
            urls > two url setup collection detail and collections list same like product
            views > collection_list
            serialize > collection serializer and the custom field 
            Models > Products model collection field 
            admin > 





        

